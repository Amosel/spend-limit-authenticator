{
  "contract_name": "spend_limit",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "price_resolution_config",
      "tracked_denoms"
    ],
    "properties": {
      "price_resolution_config": {
        "$ref": "#/definitions/PriceResolutionConfig"
      },
      "tracked_denoms": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/TrackedDenom"
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "PriceResolutionConfig": {
        "type": "object",
        "required": [
          "quote_denom",
          "staleness_threshold",
          "twap_duration"
        ],
        "properties": {
          "quote_denom": {
            "description": "Denom that the price is quoted in",
            "type": "string"
          },
          "staleness_threshold": {
            "description": "Duration in nanoseconds that the price is considered stale. If the current time is greater than the last_updated_time + staleness_threshold, the price needs to be updated.",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          },
          "twap_duration": {
            "description": "Twap duration in nanoseconds",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SwapAmountInRoute": {
        "type": "object",
        "required": [
          "pool_id",
          "token_out_denom"
        ],
        "properties": {
          "pool_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "token_out_denom": {
            "type": "string"
          }
        }
      },
      "TrackedDenom": {
        "type": "object",
        "required": [
          "denom",
          "swap_routes"
        ],
        "properties": {
          "denom": {
            "type": "string"
          },
          "swap_routes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SwapAmountInRoute"
            }
          }
        },
        "additionalProperties": false
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": null,
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "spending"
        ],
        "properties": {
          "spending": {
            "type": "object",
            "required": [
              "account",
              "authenticator_id"
            ],
            "properties": {
              "account": {
                "type": "string"
              },
              "authenticator_id": {
                "$ref": "#/definitions/Uint64"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "spendings_by_account"
        ],
        "properties": {
          "spendings_by_account": {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "spending": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SpendingResponse",
      "type": "object",
      "required": [
        "spending"
      ],
      "properties": {
        "spending": {
          "$ref": "#/definitions/Spending"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Spending": {
          "description": "State for tracking spend limit.",
          "type": "object",
          "required": [
            "last_spent_at",
            "value_spent_in_period"
          ],
          "properties": {
            "last_spent_at": {
              "description": "The last time the account spent This is used to check if we are in a new period",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            },
            "value_spent_in_period": {
              "description": "The value spent in the current period This is reset when the period changes",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "spendings_by_account": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SpendingsByAccountResponse",
      "type": "object",
      "required": [
        "spendings"
      ],
      "properties": {
        "spendings": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/Uint64"
              },
              {
                "$ref": "#/definitions/Spending"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Spending": {
          "description": "State for tracking spend limit.",
          "type": "object",
          "required": [
            "last_spent_at",
            "value_spent_in_period"
          ],
          "properties": {
            "last_spent_at": {
              "description": "The last time the account spent This is used to check if we are in a new period",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            },
            "value_spent_in_period": {
              "description": "The value spent in the current period This is reset when the period changes",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
