{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "price_resolution_config",
    "tracked_denoms"
  ],
  "properties": {
    "price_resolution_config": {
      "$ref": "#/definitions/PriceResolutionConfig"
    },
    "tracked_denoms": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TrackedDenom"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "PriceResolutionConfig": {
      "type": "object",
      "required": [
        "quote_denom",
        "staleness_threshold",
        "twap_duration"
      ],
      "properties": {
        "quote_denom": {
          "description": "Denom that the price is quoted in",
          "type": "string"
        },
        "staleness_threshold": {
          "description": "Duration in nanoseconds that the price is considered stale. If the current time is greater than the last_updated_time + staleness_threshold, the price needs to be updated.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "twap_duration": {
          "description": "Twap duration in nanoseconds",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "SwapAmountInRoute": {
      "type": "object",
      "required": [
        "pool_id",
        "token_out_denom"
      ],
      "properties": {
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token_out_denom": {
          "type": "string"
        }
      }
    },
    "TrackedDenom": {
      "type": "object",
      "required": [
        "denom",
        "swap_routes"
      ],
      "properties": {
        "denom": {
          "type": "string"
        },
        "swap_routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SwapAmountInRoute"
          }
        }
      },
      "additionalProperties": false
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
